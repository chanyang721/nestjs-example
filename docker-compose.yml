version: '3.9'

services:
  mysql_db:
    image: mysql
    container_name: ${DB_CONTAINER_HOST}
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USER}
      MYSQL_PORT: ${DB_PORT}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      TZ: Asia/Seoul
    ports:
      - 6603:${DB_PORT}
    volumes:
      - ./data/mysql_db:/var/lib/mysql
      - ./src/libs/database/init:/docker-entrypoint-initdb.d
    networks:
      - backend

  mongo_db:
    image: mongo:latest
    container_name: ${MONGO_DB_CONTAINER_HOST}
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - ${MONGO_DB_PORT}:${MONGO_DB_PORT}
    volumes:
      - ./data/mongo_db:/var/lib/mongodb
    networks:
      - backend

#  cache_redis:
#    image: redis:7.0-alpine
#    container_name: ${REDIS_CONTAINER_HOST}
#    restart: always
#    ports:
#      - ${REDIS_PORT}:${REDIS_PORT}
#    volumes:
#      - ./data/cache_redis:/data
#    networks:
#      - backend

  server:
    container_name: main_server
    working_dir: /app
    depends_on:
      - mysql_db
      - mongo_db
#      - cache_redis
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    volumes:
      - ./:/app
    command: sh -c 'yarn install && yarn build && yarn start:dev'
    networks:
      - backend

volumes:
  mysql_db:
    driver: local
  mongo_db:
    driver: local
#  cache_redis:
#    driver: local


networks:
  backend:
    driver: bridge
